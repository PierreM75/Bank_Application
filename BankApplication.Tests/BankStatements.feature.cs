// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BankApplication.Tests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Bank Account Statements")]
    public partial class BankAccountStatementsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BankStatements.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Bank Account Statements", "\tIn order to manage a great bank application, \r\n\tI want to get Account statements" +
                    " (include all operations with date, amount and balance for each)", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show account statement after having basic operations")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void ShowAccountStatementAfterHavingBasicOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show account statement after having basic operations", new string[] {
                        "mytag"});
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a client Name1 bank account with a balance of 1000€ on 10/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 8
 testRunner.When("the client Name1 do a deposit of 2000€ on 13/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 9
 testRunner.And("the client Name1 do a withdrawal of 500€ on 14/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("the client Name1 claims his bank statement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Operation",
                        "Amount",
                        "Balance"});
            table1.AddRow(new string[] {
                        "14/01/2017",
                        "Debit",
                        "500.00",
                        "2500.00"});
            table1.AddRow(new string[] {
                        "13/01/2017",
                        "Credit",
                        "2000.00",
                        "3000.00"});
            table1.AddRow(new string[] {
                        "10/01/2017",
                        "Credit",
                        "1000.00",
                        "1000.00"});
#line 11
 testRunner.Then("the client Name1 should see the following statements", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Show account statement after having disordered basic operations")]
        public virtual void ShowAccountStatementAfterHavingDisorderedBasicOperations()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Show account statement after having disordered basic operations", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
 testRunner.Given("a client Name1 bank account with a balance of 1000€ on 10/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 19
 testRunner.When("the client Name1 do a withdrawal of 500€ on 14/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 20
 testRunner.And("the client Name1 do a deposit of 2000€ on 13/01/2017", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 21
 testRunner.And("the client Name1 claims his bank statement", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Date",
                        "Operation",
                        "Amount",
                        "Balance"});
            table2.AddRow(new string[] {
                        "14/01/2017",
                        "Debit",
                        "500.00",
                        "2500.00"});
            table2.AddRow(new string[] {
                        "13/01/2017",
                        "Credit",
                        "2000.00",
                        "3000.00"});
            table2.AddRow(new string[] {
                        "10/01/2017",
                        "Credit",
                        "1000.00",
                        "1000.00"});
#line 22
 testRunner.Then("the client Name1 should see the following statements", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
